[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
    let g:sonictemplate_vim_template_dir = "$HOME/.config/nvim/template"
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Leader>d [denite]
    nnoremap <silent> [denite]f :Denite file/rec -split=horizontal -default-action=drop<CR>
    nnoremap <silent> [denite]o :Denite outline -split=horizontal -default-action=drop<CR>
    nnoremap <silent> [denite]c :Denite command_history -split=horizontal -default-action=drop<CR>
    nnoremap <silent> [denite]m :Denite mark -split=horizontal -default-action=drop<CR>

    autocmd FileType denite call s:denite_my_settings()
        function! s:denite_my_settings() abort
              nnoremap <silent><buffer><expr> <CR>
              \ denite#do_map('do_action')
              nnoremap <silent><buffer><expr> d
              \ denite#do_map('do_action', 'delete')
              nnoremap <silent><buffer><expr> p
              \ denite#do_map('do_action', 'preview')
              nnoremap <silent><buffer><expr> q
              \ denite#do_map('quit')
              nnoremap <silent><buffer><expr> i
              \ denite#do_map('open_filter_buffer')
              nnoremap <silent><buffer><expr> <Space>
              \ denite#do_map('toggle_select').'j'
        endfunction

    autocmd FileType denite-filter call s:denite_filter_my_settings()
        function! s:denite_filter_my_settings() abort
              imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
        endfunction

    " Change file/rec command.
    " For ripgrep
    call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git'])

    " Change matchers.
    call denite#custom#source(
    \ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    call denite#custom#source(
    \ 'file/rec', 'matchers', ['matcher/cpsm'])

    " Change sorters.
    call denite#custom#source(
    \ 'file/rec', 'sorters', ['sorter/sublime'])

    " Change default action.
    call denite#custom#kind('file', 'default_action', 'split')

    " Add custom menus
    let s:menus = {}

    let s:menus.zsh = {
        \ 'description': 'Edit your import zsh configuration'
        \ }
    let s:menus.zsh.file_candidates = [
        \ ['zshrc', '~/.config/zsh/.zshrc'],
        \ ['zshenv', '~/.zshenv'],
        \ ]

    let s:menus.my_commands = {
        \ 'description': 'Example commands'
        \ }
    let s:menus.my_commands.command_candidates = [
        \ ['Split the window', 'vnew'],
        \ ['Open zsh menu', 'Denite menu:zsh'],
        \ ['Format code', 'FormatCode', 'go,python'],
        \ ]

    call denite#custom#var('menu', 'menus', s:menus)

    " Ripgrep command on grep source
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
            \ ['-i', '--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    " Specify multiple paths in grep source
    "call denite#start([{'name': 'grep',
    "      \ 'args': [['a.vim', 'b.vim'], '', 'pattern']}])

    " Define alias
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
          \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#alias('source', 'file/rec/py', 'file/rec')
    call denite#custom#var('file/rec/py', 'command',['scantree.py'])

    " Change ignore_globs
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
          \ [ '.git/', '.ropeproject/', '__pycache__/',
          \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    " Custom action
    " Note: lambda function is not supported in Vim8.
    call denite#custom#action('file', 'test',
          \ {context -> execute('let g:foo = 1')})
    call denite#custom#action('file', 'test2',
          \ {context -> denite#do_action(
          \  context, 'open', context['targets'])})
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent> <Leader>f :<C-u>Defx -split=vertical -winwidth=30 -direction=topleft -toggle<CR>

    autocmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
         " Define mappings
          nnoremap <silent><buffer><expr> <CR>
         \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> o
         \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> c
         \ defx#do_action('copy')
          nnoremap <silent><buffer><expr> m
         \ defx#do_action('move')
          nnoremap <silent><buffer><expr> p
         \ defx#do_action('paste')
          nnoremap <silent><buffer><expr> l
         \ defx#do_action('open_or_close_tree')
          nnoremap <silent><buffer><expr> E
         \ defx#do_action('open', 'vsplit')
          nnoremap <silent><buffer><expr> P
         \ defx#do_action('open', 'pedit')
          nnoremap <silent><buffer><expr> K
         \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> N
         \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> d
         \ defx#do_action('remove')
          nnoremap <silent><buffer><expr> r
         \ defx#do_action('rename')
          nnoremap <silent><buffer><expr> x
         \ defx#do_action('execute_system')
          nnoremap <silent><buffer><expr> yy
         \ defx#do_action('yank_path')
          nnoremap <silent><buffer><expr> .
         \ defx#do_action('toggle_ignored_files')
          nnoremap <silent><buffer><expr> h
         \ defx#do_action('cd', ['..'])
          nnoremap <silent><buffer><expr> ~
         \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> q
         \ defx#do_action('quit')
          nnoremap <silent><buffer><expr> <Space>
         \ defx#do_action('toggle_select') . 'j' nnoremap <silent><buffer><expr> * \ defx#do_action('toggle_select_all')
          nnoremap <silent><buffer><expr> j
         \ line('.') == line('$') ? 'gg' : 'j'
          nnoremap <silent><buffer><expr> k
         \ line('.') == 1 ? 'G' : 'k'
          nnoremap <silent><buffer><expr> <C-l>
         \ defx#do_action('redraw')
          nnoremap <silent><buffer><expr> <C-g>
         \ defx#do_action('print')
          nnoremap <silent><buffer><expr> cd
         \ defx#do_action('change_vim_cwd')
        endfunction
'''

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
        \ '_': {
            \ 'runner': 'vimproc',
            \ 'runner/vimproc/updatetime': 60,
            \ 'hook/time/enable': 1,
            \ 'outputter/buffer/split': 'botright 8',
            \ 'outputter/buffer/close_on_empty': 1,
            \ 'outputter/error/success': 'buffer',
            \ 'outputter/errori/error': 'quickfix'
        \ },
        \ 'cpp': {
            \ 'command': 'clang++',
        \ },
    \ }
    nnoremap <expr><silent> <C-c> quickrun#is_running()?quickrun#sweep_sessions():"\<C-c>"
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'
hook_add = '''
    inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    if has('patch8.1.1068')
        inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
        imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    autocmd CursorHold * silent call CocActionAsync('highlight')

    nmap <leader>rn <Plug>(coc-rename)

    nmap <leader>ac  <Plug>(coc-codeaction)
    nmap <leader>qf  <Plug>(coc-fix-current)

    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    command! -nargs=0 Format :call CocAction('format')
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set noshowmode
    set laststatus=2
    let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['gitbranch', 'readonly', 'filename', 'modified'],
        \     ['cocstatus', 'currentfunction'],
        \   ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'fugitive#head',
        \   'cocstatus': 'coc#status',
        \   'currentfunction': 'CocCurrentFunction'
        \ },
        \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
        \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" },
        \}

    function! CocCurrentFunction()
        return get(b:, 'coc_current_function', '')
    endfunction
'''
